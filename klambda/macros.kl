"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun macroexpand (V13449) (let Y (shun.compose (value *macros*) V13449) (if (= V13449 Y) V13449 (shun.walk (lambda Z (macroexpand Z)) Y))))

(defun shun.error-macro (V13451) (cond ((and (cons? V13451) (and (= error (hd V13451)) (cons? (tl V13451)))) (cons simple-error (cons (shun.mkstr (hd (tl V13451)) (tl (tl V13451))) ()))) (true V13451)))

(defun shun.output-macro (V13453) (cond ((and (cons? V13453) (and (= output (hd V13453)) (cons? (tl V13453)))) (cons shun.prhush (cons (shun.mkstr (hd (tl V13453)) (tl (tl V13453))) (cons (cons stoutput ()) ())))) ((and (cons? V13453) (and (= pr (hd V13453)) (and (cons? (tl V13453)) (= () (tl (tl V13453)))))) (cons pr (cons (hd (tl V13453)) (cons (cons stoutput ()) ())))) (true V13453)))

(defun shun.make-string-macro (V13455) (cond ((and (cons? V13455) (and (= make-string (hd V13455)) (cons? (tl V13455)))) (shun.mkstr (hd (tl V13455)) (tl (tl V13455)))) (true V13455)))

(defun shun.input-macro (V13457) (cond ((and (cons? V13457) (and (= lineread (hd V13457)) (= () (tl V13457)))) (cons lineread (cons (cons stinput ()) ()))) ((and (cons? V13457) (and (= input (hd V13457)) (= () (tl V13457)))) (cons input (cons (cons stinput ()) ()))) ((and (cons? V13457) (and (= read (hd V13457)) (= () (tl V13457)))) (cons read (cons (cons stinput ()) ()))) ((and (cons? V13457) (and (= input+ (hd V13457)) (and (cons? (tl V13457)) (= () (tl (tl V13457)))))) (cons input+ (cons (hd (tl V13457)) (cons (cons stinput ()) ())))) ((and (cons? V13457) (and (= read-byte (hd V13457)) (= () (tl V13457)))) (cons read-byte (cons (cons stinput ()) ()))) (true V13457)))

(defun shun.compose (V13460 V13461) (cond ((= () V13460) V13461) ((cons? V13460) (shun.compose (tl V13460) ((hd V13460) V13461))) (true (shun.f_error shun.compose))))

(defun shun.compile-macro (V13463) (cond ((and (cons? V13463) (and (= compile (hd V13463)) (and (cons? (tl V13463)) (and (cons? (tl (tl V13463))) (= () (tl (tl (tl V13463)))))))) (cons compile (cons (hd (tl V13463)) (cons (hd (tl (tl V13463))) (cons (cons lambda (cons E (cons (cons if (cons (cons cons? (cons E ())) (cons (cons error (cons "parse error here: ~S~%" (cons E ()))) (cons (cons error (cons "parse error~%" ())) ())))) ()))) ()))))) (true V13463)))

(defun shun.prolog-macro (V13465) (cond ((and (cons? V13465) (= prolog? (hd V13465))) (let F (gensym shun.f) (let Receive (shun.receive-terms (tl V13465)) (let PrologDef (eval (append (cons defprolog (cons F ())) (append Receive (append (cons <-- ()) (append (shun.pass-literals (tl V13465)) (cons ; ())))))) (let Query (cons F (append Receive (cons (cons shun.start-new-prolog-process ()) (cons (cons freeze (cons true ())) ())))) Query))))) (true V13465)))

(defun shun.receive-terms (V13471) (cond ((= () V13471) ()) ((and (cons? V13471) (and (cons? (hd V13471)) (and (= receive (hd (hd V13471))) (and (cons? (tl (hd V13471))) (= () (tl (tl (hd V13471)))))))) (cons (hd (tl (hd V13471))) (shun.receive-terms (tl V13471)))) ((cons? V13471) (shun.receive-terms (tl V13471))) (true (shun.f_error shun.receive-terms))))

(defun shun.pass-literals (V13475) (cond ((= () V13475) ()) ((and (cons? V13475) (and (cons? (hd V13475)) (and (= receive (hd (hd V13475))) (and (cons? (tl (hd V13475))) (= () (tl (tl (hd V13475)))))))) (shun.pass-literals (tl V13475))) ((cons? V13475) (cons (hd V13475) (shun.pass-literals (tl V13475)))) (true (shun.f_error shun.pass-literals))))

(defun shun.defprolog-macro (V13477) (cond ((and (cons? V13477) (and (= defprolog (hd V13477)) (cons? (tl V13477)))) (compile (lambda Y (shun.<defprolog> Y)) (tl V13477) (lambda Y (shun.prolog-error (hd (tl V13477)) Y)))) (true V13477)))

(defun shun.datatype-macro (V13479) (cond ((and (cons? V13479) (and (= datatype (hd V13479)) (cons? (tl V13479)))) (cons shun.process-datatype (cons (shun.intern-type (hd (tl V13479))) (cons (cons compile (cons (cons lambda (cons X (cons (cons shun.<datatype-rules> (cons X ())) ()))) (cons (shun.rcons_form (tl (tl V13479))) (cons (cons function (cons shun.datatype-error ())) ())))) ())))) (true V13479)))

(defun shun.intern-type (V13481) (intern (cn "type#" (str V13481))))

(defun shun.@s-macro (V13483) (cond ((and (cons? V13483) (and (= @s (hd V13483)) (and (cons? (tl V13483)) (and (cons? (tl (tl V13483))) (cons? (tl (tl (tl V13483)))))))) (cons @s (cons (hd (tl V13483)) (cons (shun.@s-macro (cons @s (tl (tl V13483)))) ())))) ((and (cons? V13483) (and (= @s (hd V13483)) (and (cons? (tl V13483)) (and (cons? (tl (tl V13483))) (and (= () (tl (tl (tl V13483)))) (string? (hd (tl V13483)))))))) (let E (explode (hd (tl V13483))) (if (> (length E) 1) (shun.@s-macro (cons @s (append E (tl (tl V13483))))) V13483))) (true V13483)))

(defun shun.synonyms-macro (V13485) (cond ((and (cons? V13485) (= synonyms (hd V13485))) (cons shun.synonyms-help (cons (shun.rcons_form (shun.curry-synonyms (tl V13485))) ()))) (true V13485)))

(defun shun.curry-synonyms (V13487) (map (lambda X (shun.curry-type X)) V13487))

(defun shun.nl-macro (V13489) (cond ((and (cons? V13489) (and (= nl (hd V13489)) (= () (tl V13489)))) (cons nl (cons 1 ()))) (true V13489)))

(defun shun.assoc-macro (V13491) (cond ((and (cons? V13491) (and (cons? (tl V13491)) (and (cons? (tl (tl V13491))) (and (cons? (tl (tl (tl V13491)))) (element? (hd V13491) (cons @p (cons @v (cons append (cons and (cons or (cons + (cons * (cons do ()))))))))))))) (cons (hd V13491) (cons (hd (tl V13491)) (cons (shun.assoc-macro (cons (hd V13491) (tl (tl V13491)))) ())))) (true V13491)))

(defun shun.let-macro (V13493) (cond ((and (cons? V13493) (and (= let (hd V13493)) (and (cons? (tl V13493)) (and (cons? (tl (tl V13493))) (and (cons? (tl (tl (tl V13493)))) (cons? (tl (tl (tl (tl V13493)))))))))) (cons let (cons (hd (tl V13493)) (cons (hd (tl (tl V13493))) (cons (shun.let-macro (cons let (tl (tl (tl V13493))))) ()))))) (true V13493)))

(defun shun.abs-macro (V13495) (cond ((and (cons? V13495) (and (= /. (hd V13495)) (and (cons? (tl V13495)) (and (cons? (tl (tl V13495))) (cons? (tl (tl (tl V13495)))))))) (cons lambda (cons (hd (tl V13495)) (cons (shun.abs-macro (cons /. (tl (tl V13495)))) ())))) ((and (cons? V13495) (and (= /. (hd V13495)) (and (cons? (tl V13495)) (and (cons? (tl (tl V13495))) (= () (tl (tl (tl V13495)))))))) (cons lambda (tl V13495))) (true V13495)))

(defun shun.cases-macro (V13499) (cond ((and (cons? V13499) (and (= cases (hd V13499)) (and (cons? (tl V13499)) (and (= true (hd (tl V13499))) (cons? (tl (tl V13499))))))) (hd (tl (tl V13499)))) ((and (cons? V13499) (and (= cases (hd V13499)) (and (cons? (tl V13499)) (and (cons? (tl (tl V13499))) (= () (tl (tl (tl V13499)))))))) (cons if (cons (hd (tl V13499)) (cons (hd (tl (tl V13499))) (cons (cons simple-error (cons "error: cases exhausted" ())) ()))))) ((and (cons? V13499) (and (= cases (hd V13499)) (and (cons? (tl V13499)) (cons? (tl (tl V13499)))))) (cons if (cons (hd (tl V13499)) (cons (hd (tl (tl V13499))) (cons (shun.cases-macro (cons cases (tl (tl (tl V13499))))) ()))))) ((and (cons? V13499) (and (= cases (hd V13499)) (and (cons? (tl V13499)) (= () (tl (tl V13499)))))) (simple-error "error: odd number of case elements
")) (true V13499)))

(defun shun.timer-macro (V13501) (cond ((and (cons? V13501) (and (= time (hd V13501)) (and (cons? (tl V13501)) (= () (tl (tl V13501)))))) (shun.let-macro (cons let (cons Start (cons (cons get-time (cons run ())) (cons Result (cons (hd (tl V13501)) (cons Finish (cons (cons get-time (cons run ())) (cons Time (cons (cons - (cons Finish (cons Start ()))) (cons Message (cons (cons shun.prhush (cons (cons cn (cons "
run time: " (cons (cons cn (cons (cons str (cons Time ())) (cons " secs
" ()))) ()))) (cons (cons stoutput ()) ()))) (cons Result ())))))))))))))) (true V13501)))

(defun shun.tuple-up (V13503) (cond ((cons? V13503) (cons @p (cons (hd V13503) (cons (shun.tuple-up (tl V13503)) ())))) (true V13503)))

(defun shun.put/get-macro (V13505) (cond ((and (cons? V13505) (and (= put (hd V13505)) (and (cons? (tl V13505)) (and (cons? (tl (tl V13505))) (and (cons? (tl (tl (tl V13505)))) (= () (tl (tl (tl (tl V13505)))))))))) (cons put (cons (hd (tl V13505)) (cons (hd (tl (tl V13505))) (cons (hd (tl (tl (tl V13505)))) (cons (cons value (cons *property-vector* ())) ())))))) ((and (cons? V13505) (and (= get (hd V13505)) (and (cons? (tl V13505)) (and (cons? (tl (tl V13505))) (= () (tl (tl (tl V13505)))))))) (cons get (cons (hd (tl V13505)) (cons (hd (tl (tl V13505))) (cons (cons value (cons *property-vector* ())) ()))))) ((and (cons? V13505) (and (= unput (hd V13505)) (and (cons? (tl V13505)) (and (cons? (tl (tl V13505))) (= () (tl (tl (tl V13505)))))))) (cons unput (cons (hd (tl V13505)) (cons (hd (tl (tl V13505))) (cons (cons value (cons *property-vector* ())) ()))))) (true V13505)))

(defun shun.function-macro (V13507) (cond ((and (cons? V13507) (and (= function (hd V13507)) (and (cons? (tl V13507)) (= () (tl (tl V13507)))))) (shun.function-abstraction (hd (tl V13507)) (arity (hd (tl V13507))))) (true V13507)))

(defun shun.function-abstraction (V13510 V13511) (cond ((= 0 V13511) (simple-error (shun.app V13510 " has no lambda form
" shun.a))) ((= -1 V13511) (cons function (cons V13510 ()))) (true (shun.function-abstraction-help V13510 V13511 ()))))

(defun shun.function-abstraction-help (V13515 V13516 V13517) (cond ((= 0 V13516) (cons V13515 V13517)) (true (let X (gensym V) (cons /. (cons X (cons (shun.function-abstraction-help V13515 (- V13516 1) (append V13517 (cons X ()))) ())))))))

(defun undefmacro (V13519) (let MacroReg (value shun.*macroreg*) (let Pos (shun.findpos V13519 MacroReg) (let Remove1 (set shun.*macroreg* (remove V13519 MacroReg)) (let Remove2 (set *macros* (shun.remove-nth Pos (value *macros*))) V13519)))))

(defun shun.findpos (V13529 V13530) (cond ((= () V13530) (simple-error (shun.app V13529 " is not a macro
" shun.a))) ((and (cons? V13530) (= (hd V13530) V13529)) 1) ((cons? V13530) (+ 1 (shun.findpos V13529 (tl V13530)))) (true (shun.f_error shun.findpos))))

(defun shun.remove-nth (V13535 V13536) (cond ((and (= 1 V13535) (cons? V13536)) (tl V13536)) ((cons? V13536) (cons (hd V13536) (shun.remove-nth (- V13535 1) (tl V13536)))) (true (shun.f_error shun.remove-nth))))



