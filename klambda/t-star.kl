"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shun.typecheck (V15299 V15300) (let Curry (shun.curry V15299) (let ProcessN (shun.start-new-prolog-process) (let Type (shun.insert-prolog-variables (shun.demodulate (shun.curry-type V15300)) ProcessN) (let Continuation (freeze (return Type ProcessN shun.void)) (shun.t* (cons Curry (cons : (cons Type ()))) () ProcessN Continuation))))))

(defun shun.curry (V15302) (cond ((and (cons? V15302) (shun.special? (hd V15302))) (cons (hd V15302) (map (lambda Y (shun.curry Y)) (tl V15302)))) ((and (cons? V15302) (and (cons? (tl V15302)) (shun.extraspecial? (hd V15302)))) V15302) ((and (cons? V15302) (and (= type (hd V15302)) (and (cons? (tl V15302)) (and (cons? (tl (tl V15302))) (= () (tl (tl (tl V15302)))))))) (cons type (cons (shun.curry (hd (tl V15302))) (tl (tl V15302))))) ((and (cons? V15302) (and (cons? (tl V15302)) (cons? (tl (tl V15302))))) (shun.curry (cons (cons (hd V15302) (cons (hd (tl V15302)) ())) (tl (tl V15302))))) ((and (cons? V15302) (and (cons? (tl V15302)) (= () (tl (tl V15302))))) (cons (shun.curry (hd V15302)) (cons (shun.curry (hd (tl V15302))) ()))) (true V15302)))

(defun shun.special? (V15304) (element? V15304 (value shun.*special*)))

(defun shun.extraspecial? (V15306) (element? V15306 (value shun.*extraspecial*)))

(defun shun.t* (V15311 V15312 V15313 V15314) (let Throwcontrol (shun.catchpoint) (shun.cutpoint Throwcontrol (let Case (let Error (shun.newpv V15313) (do (shun.incinfs) (fwhen (shun.maxinfexceeded?) V15313 (freeze (bind Error (shun.errormaxinfs) V15313 V15314))))) (if (= Case false) (let Case (let V15291 (shun.lazyderef V15311 V15313) (if (= fail V15291) (do (shun.incinfs) (cut Throwcontrol V15313 (freeze (shun.prolog-failure V15313 V15314)))) false)) (if (= Case false) (let Case (let V15292 (shun.lazyderef V15311 V15313) (if (cons? V15292) (let X (hd V15292) (let V15293 (shun.lazyderef (tl V15292) V15313) (if (cons? V15293) (let V15294 (shun.lazyderef (hd V15293) V15313) (if (= : V15294) (let V15295 (shun.lazyderef (tl V15293) V15313) (if (cons? V15295) (let A (hd V15295) (let V15296 (shun.lazyderef (tl V15295) V15313) (if (= () V15296) (do (shun.incinfs) (fwhen (shun.type-theory-enabled?) V15313 (freeze (cut Throwcontrol V15313 (freeze (shun.th* X A V15312 V15313 V15314)))))) false))) false)) false)) false))) false)) (if (= Case false) (let Datatypes (shun.newpv V15313) (do (shun.incinfs) (shun.show V15311 V15312 V15313 (freeze (bind Datatypes (value shun.*datatypes*) V15313 (freeze (shun.udefs* V15311 V15312 Datatypes V15313 V15314))))))) Case)) Case)) Case)))))

(defun shun.type-theory-enabled? () (value shun.*shun-type-theory-enabled?*))

(defun enable-type-theory (V15320) (cond ((= + V15320) (set shun.*shun-type-theory-enabled?* true)) ((= - V15320) (set shun.*shun-type-theory-enabled?* false)) (true (simple-error "enable-type-theory expects a + or a -
"))))

(defun shun.prolog-failure (V15331 V15332) false)

(defun shun.maxinfexceeded? () (> (inferences) (value shun.*maxinferences*)))

(defun shun.errormaxinfs () (simple-error "maximum inferences exceeded~%"))

(defun shun.udefs* (V15338 V15339 V15340 V15341 V15342) (let Case (let V15287 (shun.lazyderef V15340 V15341) (if (cons? V15287) (let D (hd V15287) (do (shun.incinfs) (call (cons D (cons V15338 (cons V15339 ()))) V15341 V15342))) false)) (if (= Case false) (let V15288 (shun.lazyderef V15340 V15341) (if (cons? V15288) (let Ds (tl V15288) (do (shun.incinfs) (shun.udefs* V15338 V15339 Ds V15341 V15342))) false)) Case)))

(defun shun.th* (V15348 V15349 V15350 V15351 V15352) (let Throwcontrol (shun.catchpoint) (shun.cutpoint Throwcontrol (let Case (do (shun.incinfs) (shun.show (cons V15348 (cons : (cons V15349 ()))) V15350 V15351 (freeze (fwhen false V15351 V15352)))) (if (= Case false) (let Case (let F (shun.newpv V15351) (do (shun.incinfs) (fwhen (shun.typedf? (shun.lazyderef V15348 V15351)) V15351 (freeze (bind F (shun.sigf (shun.lazyderef V15348 V15351)) V15351 (freeze (call (cons F (cons V15349 ())) V15351 V15352))))))) (if (= Case false) (let Case (do (shun.incinfs) (shun.base V15348 V15349 V15351 V15352)) (if (= Case false) (let Case (do (shun.incinfs) (shun.by_hypothesis V15348 V15349 V15350 V15351 V15352)) (if (= Case false) (let Case (let V15183 (shun.lazyderef V15348 V15351) (if (cons? V15183) (let F (hd V15183) (let V15184 (shun.lazyderef (tl V15183) V15351) (if (= () V15184) (do (shun.incinfs) (shun.th* F (cons --> (cons V15349 ())) V15350 V15351 V15352)) false))) false)) (if (= Case false) (let Case (let V15185 (shun.lazyderef V15348 V15351) (if (cons? V15185) (let F (hd V15185) (let V15186 (shun.lazyderef (tl V15185) V15351) (if (cons? V15186) (let X (hd V15186) (let V15187 (shun.lazyderef (tl V15186) V15351) (if (= () V15187) (let B (shun.newpv V15351) (do (shun.incinfs) (shun.th* F (cons B (cons --> (cons V15349 ()))) V15350 V15351 (freeze (shun.th* X B V15350 V15351 V15352))))) false))) false))) false)) (if (= Case false) (let Case (let V15188 (shun.lazyderef V15348 V15351) (if (cons? V15188) (let V15189 (shun.lazyderef (hd V15188) V15351) (if (= cons V15189) (let V15190 (shun.lazyderef (tl V15188) V15351) (if (cons? V15190) (let X (hd V15190) (let V15191 (shun.lazyderef (tl V15190) V15351) (if (cons? V15191) (let Y (hd V15191) (let V15192 (shun.lazyderef (tl V15191) V15351) (if (= () V15192) (let V15193 (shun.lazyderef V15349 V15351) (if (cons? V15193) (let V15194 (shun.lazyderef (hd V15193) V15351) (if (= list V15194) (let V15195 (shun.lazyderef (tl V15193) V15351) (if (cons? V15195) (let A (hd V15195) (let V15196 (shun.lazyderef (tl V15195) V15351) (if (= () V15196) (do (shun.incinfs) (shun.th* X A V15350 V15351 (freeze (shun.th* Y (cons list (cons A ())) V15350 V15351 V15352)))) (if (shun.pvar? V15196) (do (shun.bindv V15196 () V15351) (let Result (do (shun.incinfs) (shun.th* X A V15350 V15351 (freeze (shun.th* Y (cons list (cons A ())) V15350 V15351 V15352)))) (do (shun.unbindv V15196 V15351) Result))) false)))) (if (shun.pvar? V15195) (let A (shun.newpv V15351) (do (shun.bindv V15195 (cons A ()) V15351) (let Result (do (shun.incinfs) (shun.th* X A V15350 V15351 (freeze (shun.th* Y (cons list (cons A ())) V15350 V15351 V15352)))) (do (shun.unbindv V15195 V15351) Result)))) false))) (if (shun.pvar? V15194) (do (shun.bindv V15194 list V15351) (let Result (let V15197 (shun.lazyderef (tl V15193) V15351) (if (cons? V15197) (let A (hd V15197) (let V15198 (shun.lazyderef (tl V15197) V15351) (if (= () V15198) (do (shun.incinfs) (shun.th* X A V15350 V15351 (freeze (shun.th* Y (cons list (cons A ())) V15350 V15351 V15352)))) (if (shun.pvar? V15198) (do (shun.bindv V15198 () V15351) (let Result (do (shun.incinfs) (shun.th* X A V15350 V15351 (freeze (shun.th* Y (cons list (cons A ())) V15350 V15351 V15352)))) (do (shun.unbindv V15198 V15351) Result))) false)))) (if (shun.pvar? V15197) (let A (shun.newpv V15351) (do (shun.bindv V15197 (cons A ()) V15351) (let Result (do (shun.incinfs) (shun.th* X A V15350 V15351 (freeze (shun.th* Y (cons list (cons A ())) V15350 V15351 V15352)))) (do (shun.unbindv V15197 V15351) Result)))) false))) (do (shun.unbindv V15194 V15351) Result))) false))) (if (shun.pvar? V15193) (let A (shun.newpv V15351) (do (shun.bindv V15193 (cons list (cons A ())) V15351) (let Result (do (shun.incinfs) (shun.th* X A V15350 V15351 (freeze (shun.th* Y (cons list (cons A ())) V15350 V15351 V15352)))) (do (shun.unbindv V15193 V15351) Result)))) false))) false))) false))) false)) false)) false)) (if (= Case false) (let Case (let V15199 (shun.lazyderef V15348 V15351) (if (cons? V15199) (let V15200 (shun.lazyderef (hd V15199) V15351) (if (= @p V15200) (let V15201 (shun.lazyderef (tl V15199) V15351) (if (cons? V15201) (let X (hd V15201) (let V15202 (shun.lazyderef (tl V15201) V15351) (if (cons? V15202) (let Y (hd V15202) (let V15203 (shun.lazyderef (tl V15202) V15351) (if (= () V15203) (let V15204 (shun.lazyderef V15349 V15351) (if (cons? V15204) (let A (hd V15204) (let V15205 (shun.lazyderef (tl V15204) V15351) (if (cons? V15205) (let V15206 (shun.lazyderef (hd V15205) V15351) (if (= * V15206) (let V15207 (shun.lazyderef (tl V15205) V15351) (if (cons? V15207) (let B (hd V15207) (let V15208 (shun.lazyderef (tl V15207) V15351) (if (= () V15208) (do (shun.incinfs) (shun.th* X A V15350 V15351 (freeze (shun.th* Y B V15350 V15351 V15352)))) (if (shun.pvar? V15208) (do (shun.bindv V15208 () V15351) (let Result (do (shun.incinfs) (shun.th* X A V15350 V15351 (freeze (shun.th* Y B V15350 V15351 V15352)))) (do (shun.unbindv V15208 V15351) Result))) false)))) (if (shun.pvar? V15207) (let B (shun.newpv V15351) (do (shun.bindv V15207 (cons B ()) V15351) (let Result (do (shun.incinfs) (shun.th* X A V15350 V15351 (freeze (shun.th* Y B V15350 V15351 V15352)))) (do (shun.unbindv V15207 V15351) Result)))) false))) (if (shun.pvar? V15206) (do (shun.bindv V15206 * V15351) (let Result (let V15209 (shun.lazyderef (tl V15205) V15351) (if (cons? V15209) (let B (hd V15209) (let V15210 (shun.lazyderef (tl V15209) V15351) (if (= () V15210) (do (shun.incinfs) (shun.th* X A V15350 V15351 (freeze (shun.th* Y B V15350 V15351 V15352)))) (if (shun.pvar? V15210) (do (shun.bindv V15210 () V15351) (let Result (do (shun.incinfs) (shun.th* X A V15350 V15351 (freeze (shun.th* Y B V15350 V15351 V15352)))) (do (shun.unbindv V15210 V15351) Result))) false)))) (if (shun.pvar? V15209) (let B (shun.newpv V15351) (do (shun.bindv V15209 (cons B ()) V15351) (let Result (do (shun.incinfs) (shun.th* X A V15350 V15351 (freeze (shun.th* Y B V15350 V15351 V15352)))) (do (shun.unbindv V15209 V15351) Result)))) false))) (do (shun.unbindv V15206 V15351) Result))) false))) (if (shun.pvar? V15205) (let B (shun.newpv V15351) (do (shun.bindv V15205 (cons * (cons B ())) V15351) (let Result (do (shun.incinfs) (shun.th* X A V15350 V15351 (freeze (shun.th* Y B V15350 V15351 V15352)))) (do (shun.unbindv V15205 V15351) Result)))) false)))) (if (shun.pvar? V15204) (let A (shun.newpv V15351) (let B (shun.newpv V15351) (do (shun.bindv V15204 (cons A (cons * (cons B ()))) V15351) (let Result (do (shun.incinfs) (shun.th* X A V15350 V15351 (freeze (shun.th* Y B V15350 V15351 V15352)))) (do (shun.unbindv V15204 V15351) Result))))) false))) false))) false))) false)) false)) false)) (if (= Case false) (let Case (let V15211 (shun.lazyderef V15348 V15351) (if (cons? V15211) (let V15212 (shun.lazyderef (hd V15211) V15351) (if (= @v V15212) (let V15213 (shun.lazyderef (tl V15211) V15351) (if (cons? V15213) (let X (hd V15213) (let V15214 (shun.lazyderef (tl V15213) V15351) (if (cons? V15214) (let Y (hd V15214) (let V15215 (shun.lazyderef (tl V15214) V15351) (if (= () V15215) (let V15216 (shun.lazyderef V15349 V15351) (if (cons? V15216) (let V15217 (shun.lazyderef (hd V15216) V15351) (if (= vector V15217) (let V15218 (shun.lazyderef (tl V15216) V15351) (if (cons? V15218) (let A (hd V15218) (let V15219 (shun.lazyderef (tl V15218) V15351) (if (= () V15219) (do (shun.incinfs) (shun.th* X A V15350 V15351 (freeze (shun.th* Y (cons vector (cons A ())) V15350 V15351 V15352)))) (if (shun.pvar? V15219) (do (shun.bindv V15219 () V15351) (let Result (do (shun.incinfs) (shun.th* X A V15350 V15351 (freeze (shun.th* Y (cons vector (cons A ())) V15350 V15351 V15352)))) (do (shun.unbindv V15219 V15351) Result))) false)))) (if (shun.pvar? V15218) (let A (shun.newpv V15351) (do (shun.bindv V15218 (cons A ()) V15351) (let Result (do (shun.incinfs) (shun.th* X A V15350 V15351 (freeze (shun.th* Y (cons vector (cons A ())) V15350 V15351 V15352)))) (do (shun.unbindv V15218 V15351) Result)))) false))) (if (shun.pvar? V15217) (do (shun.bindv V15217 vector V15351) (let Result (let V15220 (shun.lazyderef (tl V15216) V15351) (if (cons? V15220) (let A (hd V15220) (let V15221 (shun.lazyderef (tl V15220) V15351) (if (= () V15221) (do (shun.incinfs) (shun.th* X A V15350 V15351 (freeze (shun.th* Y (cons vector (cons A ())) V15350 V15351 V15352)))) (if (shun.pvar? V15221) (do (shun.bindv V15221 () V15351) (let Result (do (shun.incinfs) (shun.th* X A V15350 V15351 (freeze (shun.th* Y (cons vector (cons A ())) V15350 V15351 V15352)))) (do (shun.unbindv V15221 V15351) Result))) false)))) (if (shun.pvar? V15220) (let A (shun.newpv V15351) (do (shun.bindv V15220 (cons A ()) V15351) (let Result (do (shun.incinfs) (shun.th* X A V15350 V15351 (freeze (shun.th* Y (cons vector (cons A ())) V15350 V15351 V15352)))) (do (shun.unbindv V15220 V15351) Result)))) false))) (do (shun.unbindv V15217 V15351) Result))) false))) (if (shun.pvar? V15216) (let A (shun.newpv V15351) (do (shun.bindv V15216 (cons vector (cons A ())) V15351) (let Result (do (shun.incinfs) (shun.th* X A V15350 V15351 (freeze (shun.th* Y (cons vector (cons A ())) V15350 V15351 V15352)))) (do (shun.unbindv V15216 V15351) Result)))) false))) false))) false))) false)) false)) false)) (if (= Case false) (let Case (let V15222 (shun.lazyderef V15348 V15351) (if (cons? V15222) (let V15223 (shun.lazyderef (hd V15222) V15351) (if (= @s V15223) (let V15224 (shun.lazyderef (tl V15222) V15351) (if (cons? V15224) (let X (hd V15224) (let V15225 (shun.lazyderef (tl V15224) V15351) (if (cons? V15225) (let Y (hd V15225) (let V15226 (shun.lazyderef (tl V15225) V15351) (if (= () V15226) (let V15227 (shun.lazyderef V15349 V15351) (if (= string V15227) (do (shun.incinfs) (shun.th* X string V15350 V15351 (freeze (shun.th* Y string V15350 V15351 V15352)))) (if (shun.pvar? V15227) (do (shun.bindv V15227 string V15351) (let Result (do (shun.incinfs) (shun.th* X string V15350 V15351 (freeze (shun.th* Y string V15350 V15351 V15352)))) (do (shun.unbindv V15227 V15351) Result))) false))) false))) false))) false)) false)) false)) (if (= Case false) (let Case (let V15228 (shun.lazyderef V15348 V15351) (if (cons? V15228) (let V15229 (shun.lazyderef (hd V15228) V15351) (if (= lambda V15229) (let V15230 (shun.lazyderef (tl V15228) V15351) (if (cons? V15230) (let X (hd V15230) (let V15231 (shun.lazyderef (tl V15230) V15351) (if (cons? V15231) (let Y (hd V15231) (let V15232 (shun.lazyderef (tl V15231) V15351) (if (= () V15232) (let V15233 (shun.lazyderef V15349 V15351) (if (cons? V15233) (let A (hd V15233) (let V15234 (shun.lazyderef (tl V15233) V15351) (if (cons? V15234) (let V15235 (shun.lazyderef (hd V15234) V15351) (if (= --> V15235) (let V15236 (shun.lazyderef (tl V15234) V15351) (if (cons? V15236) (let B (hd V15236) (let V15237 (shun.lazyderef (tl V15236) V15351) (if (= () V15237) (let Z (shun.newpv V15351) (let X&& (shun.newpv V15351) (do (shun.incinfs) (cut Throwcontrol V15351 (freeze (bind X&& (shun.placeholder) V15351 (freeze (bind Z (shun.ebr (shun.lazyderef X&& V15351) (shun.lazyderef X V15351) (shun.lazyderef Y V15351)) V15351 (freeze (shun.th* Z B (cons (cons X&& (cons : (cons A ()))) V15350) V15351 V15352)))))))))) (if (shun.pvar? V15237) (do (shun.bindv V15237 () V15351) (let Result (let Z (shun.newpv V15351) (let X&& (shun.newpv V15351) (do (shun.incinfs) (cut Throwcontrol V15351 (freeze (bind X&& (shun.placeholder) V15351 (freeze (bind Z (shun.ebr (shun.lazyderef X&& V15351) (shun.lazyderef X V15351) (shun.lazyderef Y V15351)) V15351 (freeze (shun.th* Z B (cons (cons X&& (cons : (cons A ()))) V15350) V15351 V15352)))))))))) (do (shun.unbindv V15237 V15351) Result))) false)))) (if (shun.pvar? V15236) (let B (shun.newpv V15351) (do (shun.bindv V15236 (cons B ()) V15351) (let Result (let Z (shun.newpv V15351) (let X&& (shun.newpv V15351) (do (shun.incinfs) (cut Throwcontrol V15351 (freeze (bind X&& (shun.placeholder) V15351 (freeze (bind Z (shun.ebr (shun.lazyderef X&& V15351) (shun.lazyderef X V15351) (shun.lazyderef Y V15351)) V15351 (freeze (shun.th* Z B (cons (cons X&& (cons : (cons A ()))) V15350) V15351 V15352)))))))))) (do (shun.unbindv V15236 V15351) Result)))) false))) (if (shun.pvar? V15235) (do (shun.bindv V15235 --> V15351) (let Result (let V15238 (shun.lazyderef (tl V15234) V15351) (if (cons? V15238) (let B (hd V15238) (let V15239 (shun.lazyderef (tl V15238) V15351) (if (= () V15239) (let Z (shun.newpv V15351) (let X&& (shun.newpv V15351) (do (shun.incinfs) (cut Throwcontrol V15351 (freeze (bind X&& (shun.placeholder) V15351 (freeze (bind Z (shun.ebr (shun.lazyderef X&& V15351) (shun.lazyderef X V15351) (shun.lazyderef Y V15351)) V15351 (freeze (shun.th* Z B (cons (cons X&& (cons : (cons A ()))) V15350) V15351 V15352)))))))))) (if (shun.pvar? V15239) (do (shun.bindv V15239 () V15351) (let Result (let Z (shun.newpv V15351) (let X&& (shun.newpv V15351) (do (shun.incinfs) (cut Throwcontrol V15351 (freeze (bind X&& (shun.placeholder) V15351 (freeze (bind Z (shun.ebr (shun.lazyderef X&& V15351) (shun.lazyderef X V15351) (shun.lazyderef Y V15351)) V15351 (freeze (shun.th* Z B (cons (cons X&& (cons : (cons A ()))) V15350) V15351 V15352)))))))))) (do (shun.unbindv V15239 V15351) Result))) false)))) (if (shun.pvar? V15238) (let B (shun.newpv V15351) (do (shun.bindv V15238 (cons B ()) V15351) (let Result (let Z (shun.newpv V15351) (let X&& (shun.newpv V15351) (do (shun.incinfs) (cut Throwcontrol V15351 (freeze (bind X&& (shun.placeholder) V15351 (freeze (bind Z (shun.ebr (shun.lazyderef X&& V15351) (shun.lazyderef X V15351) (shun.lazyderef Y V15351)) V15351 (freeze (shun.th* Z B (cons (cons X&& (cons : (cons A ()))) V15350) V15351 V15352)))))))))) (do (shun.unbindv V15238 V15351) Result)))) false))) (do (shun.unbindv V15235 V15351) Result))) false))) (if (shun.pvar? V15234) (let B (shun.newpv V15351) (do (shun.bindv V15234 (cons --> (cons B ())) V15351) (let Result (let Z (shun.newpv V15351) (let X&& (shun.newpv V15351) (do (shun.incinfs) (cut Throwcontrol V15351 (freeze (bind X&& (shun.placeholder) V15351 (freeze (bind Z (shun.ebr (shun.lazyderef X&& V15351) (shun.lazyderef X V15351) (shun.lazyderef Y V15351)) V15351 (freeze (shun.th* Z B (cons (cons X&& (cons : (cons A ()))) V15350) V15351 V15352)))))))))) (do (shun.unbindv V15234 V15351) Result)))) false)))) (if (shun.pvar? V15233) (let A (shun.newpv V15351) (let B (shun.newpv V15351) (do (shun.bindv V15233 (cons A (cons --> (cons B ()))) V15351) (let Result (let Z (shun.newpv V15351) (let X&& (shun.newpv V15351) (do (shun.incinfs) (cut Throwcontrol V15351 (freeze (bind X&& (shun.placeholder) V15351 (freeze (bind Z (shun.ebr (shun.lazyderef X&& V15351) (shun.lazyderef X V15351) (shun.lazyderef Y V15351)) V15351 (freeze (shun.th* Z B (cons (cons X&& (cons : (cons A ()))) V15350) V15351 V15352)))))))))) (do (shun.unbindv V15233 V15351) Result))))) false))) false))) false))) false)) false)) false)) (if (= Case false) (let Case (let V15240 (shun.lazyderef V15348 V15351) (if (cons? V15240) (let V15241 (shun.lazyderef (hd V15240) V15351) (if (= let V15241) (let V15242 (shun.lazyderef (tl V15240) V15351) (if (cons? V15242) (let X (hd V15242) (let V15243 (shun.lazyderef (tl V15242) V15351) (if (cons? V15243) (let Y (hd V15243) (let V15244 (shun.lazyderef (tl V15243) V15351) (if (cons? V15244) (let Z (hd V15244) (let V15245 (shun.lazyderef (tl V15244) V15351) (if (= () V15245) (let W (shun.newpv V15351) (let X&& (shun.newpv V15351) (let B (shun.newpv V15351) (do (shun.incinfs) (shun.th* Y B V15350 V15351 (freeze (bind X&& (shun.placeholder) V15351 (freeze (bind W (shun.ebr (shun.lazyderef X&& V15351) (shun.lazyderef X V15351) (shun.lazyderef Z V15351)) V15351 (freeze (shun.th* W V15349 (cons (cons X&& (cons : (cons B ()))) V15350) V15351 V15352))))))))))) false))) false))) false))) false)) false)) false)) (if (= Case false) (let Case (let V15246 (shun.lazyderef V15348 V15351) (if (cons? V15246) (let V15247 (shun.lazyderef (hd V15246) V15351) (if (= open V15247) (let V15248 (shun.lazyderef (tl V15246) V15351) (if (cons? V15248) (let FileName (hd V15248) (let V15249 (shun.lazyderef (tl V15248) V15351) (if (cons? V15249) (let Direction15179 (hd V15249) (let V15250 (shun.lazyderef (tl V15249) V15351) (if (= () V15250) (let V15251 (shun.lazyderef V15349 V15351) (if (cons? V15251) (let V15252 (shun.lazyderef (hd V15251) V15351) (if (= stream V15252) (let V15253 (shun.lazyderef (tl V15251) V15351) (if (cons? V15253) (let Direction (hd V15253) (let V15254 (shun.lazyderef (tl V15253) V15351) (if (= () V15254) (do (shun.incinfs) (unify! Direction Direction15179 V15351 (freeze (cut Throwcontrol V15351 (freeze (fwhen (element? (shun.lazyderef Direction V15351) (cons in (cons out ()))) V15351 (freeze (shun.th* FileName string V15350 V15351 V15352)))))))) (if (shun.pvar? V15254) (do (shun.bindv V15254 () V15351) (let Result (do (shun.incinfs) (unify! Direction Direction15179 V15351 (freeze (cut Throwcontrol V15351 (freeze (fwhen (element? (shun.lazyderef Direction V15351) (cons in (cons out ()))) V15351 (freeze (shun.th* FileName string V15350 V15351 V15352)))))))) (do (shun.unbindv V15254 V15351) Result))) false)))) (if (shun.pvar? V15253) (let Direction (shun.newpv V15351) (do (shun.bindv V15253 (cons Direction ()) V15351) (let Result (do (shun.incinfs) (unify! Direction Direction15179 V15351 (freeze (cut Throwcontrol V15351 (freeze (fwhen (element? (shun.lazyderef Direction V15351) (cons in (cons out ()))) V15351 (freeze (shun.th* FileName string V15350 V15351 V15352)))))))) (do (shun.unbindv V15253 V15351) Result)))) false))) (if (shun.pvar? V15252) (do (shun.bindv V15252 stream V15351) (let Result (let V15255 (shun.lazyderef (tl V15251) V15351) (if (cons? V15255) (let Direction (hd V15255) (let V15256 (shun.lazyderef (tl V15255) V15351) (if (= () V15256) (do (shun.incinfs) (unify! Direction Direction15179 V15351 (freeze (cut Throwcontrol V15351 (freeze (fwhen (element? (shun.lazyderef Direction V15351) (cons in (cons out ()))) V15351 (freeze (shun.th* FileName string V15350 V15351 V15352)))))))) (if (shun.pvar? V15256) (do (shun.bindv V15256 () V15351) (let Result (do (shun.incinfs) (unify! Direction Direction15179 V15351 (freeze (cut Throwcontrol V15351 (freeze (fwhen (element? (shun.lazyderef Direction V15351) (cons in (cons out ()))) V15351 (freeze (shun.th* FileName string V15350 V15351 V15352)))))))) (do (shun.unbindv V15256 V15351) Result))) false)))) (if (shun.pvar? V15255) (let Direction (shun.newpv V15351) (do (shun.bindv V15255 (cons Direction ()) V15351) (let Result (do (shun.incinfs) (unify! Direction Direction15179 V15351 (freeze (cut Throwcontrol V15351 (freeze (fwhen (element? (shun.lazyderef Direction V15351) (cons in (cons out ()))) V15351 (freeze (shun.th* FileName string V15350 V15351 V15352)))))))) (do (shun.unbindv V15255 V15351) Result)))) false))) (do (shun.unbindv V15252 V15351) Result))) false))) (if (shun.pvar? V15251) (let Direction (shun.newpv V15351) (do (shun.bindv V15251 (cons stream (cons Direction ())) V15351) (let Result (do (shun.incinfs) (unify! Direction Direction15179 V15351 (freeze (cut Throwcontrol V15351 (freeze (fwhen (element? (shun.lazyderef Direction V15351) (cons in (cons out ()))) V15351 (freeze (shun.th* FileName string V15350 V15351 V15352)))))))) (do (shun.unbindv V15251 V15351) Result)))) false))) false))) false))) false)) false)) false)) (if (= Case false) (let Case (let V15257 (shun.lazyderef V15348 V15351) (if (cons? V15257) (let V15258 (shun.lazyderef (hd V15257) V15351) (if (= type V15258) (let V15259 (shun.lazyderef (tl V15257) V15351) (if (cons? V15259) (let X (hd V15259) (let V15260 (shun.lazyderef (tl V15259) V15351) (if (cons? V15260) (let A (hd V15260) (let V15261 (shun.lazyderef (tl V15260) V15351) (if (= () V15261) (do (shun.incinfs) (cut Throwcontrol V15351 (freeze (unify A V15349 V15351 (freeze (shun.th* X A V15350 V15351 V15352)))))) false))) false))) false)) false)) false)) (if (= Case false) (let Case (let V15262 (shun.lazyderef V15348 V15351) (if (cons? V15262) (let V15263 (shun.lazyderef (hd V15262) V15351) (if (= input+ V15263) (let V15264 (shun.lazyderef (tl V15262) V15351) (if (cons? V15264) (let A (hd V15264) (let V15265 (shun.lazyderef (tl V15264) V15351) (if (cons? V15265) (let Stream (hd V15265) (let V15266 (shun.lazyderef (tl V15265) V15351) (if (= () V15266) (let C (shun.newpv V15351) (do (shun.incinfs) (bind C (shun.demodulate (shun.lazyderef A V15351)) V15351 (freeze (unify V15349 C V15351 (freeze (shun.th* Stream (cons stream (cons in ())) V15350 V15351 V15352))))))) false))) false))) false)) false)) false)) (if (= Case false) (let Case (let V15267 (shun.lazyderef V15348 V15351) (if (cons? V15267) (let V15268 (shun.lazyderef (hd V15267) V15351) (if (= set V15268) (let V15269 (shun.lazyderef (tl V15267) V15351) (if (cons? V15269) (let Var (hd V15269) (let V15270 (shun.lazyderef (tl V15269) V15351) (if (cons? V15270) (let Val (hd V15270) (let V15271 (shun.lazyderef (tl V15270) V15351) (if (= () V15271) (do (shun.incinfs) (cut Throwcontrol V15351 (freeze (shun.th* Var symbol V15350 V15351 (freeze (cut Throwcontrol V15351 (freeze (shun.th* (cons value (cons Var ())) V15349 V15350 V15351 (freeze (shun.th* Val V15349 V15350 V15351 V15352)))))))))) false))) false))) false)) false)) false)) (if (= Case false) (let Case (let NewHyp (shun.newpv V15351) (do (shun.incinfs) (shun.t*-hyps V15350 NewHyp V15351 (freeze (shun.th* V15348 V15349 NewHyp V15351 V15352))))) (if (= Case false) (let Case (let V15272 (shun.lazyderef V15348 V15351) (if (cons? V15272) (let V15273 (shun.lazyderef (hd V15272) V15351) (if (= define V15273) (let V15274 (shun.lazyderef (tl V15272) V15351) (if (cons? V15274) (let F (hd V15274) (let X (tl V15274) (do (shun.incinfs) (cut Throwcontrol V15351 (freeze (shun.t*-def (cons define (cons F X)) V15349 V15350 V15351 V15352)))))) false)) false)) false)) (if (= Case false) (let Case (let V15275 (shun.lazyderef V15348 V15351) (if (cons? V15275) (let V15276 (shun.lazyderef (hd V15275) V15351) (if (= defmacro V15276) (let V15277 (shun.lazyderef V15349 V15351) (if (= unit V15277) (do (shun.incinfs) (cut Throwcontrol V15351 V15352)) (if (shun.pvar? V15277) (do (shun.bindv V15277 unit V15351) (let Result (do (shun.incinfs) (cut Throwcontrol V15351 V15352)) (do (shun.unbindv V15277 V15351) Result))) false))) false)) false)) (if (= Case false) (let Case (let V15278 (shun.lazyderef V15348 V15351) (if (cons? V15278) (let V15279 (shun.lazyderef (hd V15278) V15351) (if (= shun.process-datatype V15279) (let V15280 (shun.lazyderef V15349 V15351) (if (= symbol V15280) (do (shun.incinfs) (thaw V15352)) (if (shun.pvar? V15280) (do (shun.bindv V15280 symbol V15351) (let Result (do (shun.incinfs) (thaw V15352)) (do (shun.unbindv V15280 V15351) Result))) false))) false)) false)) (if (= Case false) (let Case (let V15281 (shun.lazyderef V15348 V15351) (if (cons? V15281) (let V15282 (shun.lazyderef (hd V15281) V15351) (if (= shun.synonyms-help V15282) (let V15283 (shun.lazyderef V15349 V15351) (if (= symbol V15283) (do (shun.incinfs) (thaw V15352)) (if (shun.pvar? V15283) (do (shun.bindv V15283 symbol V15351) (let Result (do (shun.incinfs) (thaw V15352)) (do (shun.unbindv V15283 V15351) Result))) false))) false)) false)) (if (= Case false) (let Datatypes (shun.newpv V15351) (do (shun.incinfs) (bind Datatypes (value shun.*datatypes*) V15351 (freeze (shun.udefs* (cons V15348 (cons : (cons V15349 ()))) V15350 Datatypes V15351 V15352))))) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)))))

(defun shun.t*-hyps (V15357 V15358 V15359 V15360) (let Case (let V15094 (shun.lazyderef V15357 V15359) (if (cons? V15094) (let V15095 (shun.lazyderef (hd V15094) V15359) (if (cons? V15095) (let V15096 (shun.lazyderef (hd V15095) V15359) (if (cons? V15096) (let V15097 (shun.lazyderef (hd V15096) V15359) (if (= cons V15097) (let V15098 (shun.lazyderef (tl V15096) V15359) (if (cons? V15098) (let X (hd V15098) (let V15099 (shun.lazyderef (tl V15098) V15359) (if (cons? V15099) (let Y (hd V15099) (let V15100 (shun.lazyderef (tl V15099) V15359) (if (= () V15100) (let V15101 (shun.lazyderef (tl V15095) V15359) (if (cons? V15101) (let V15102 (shun.lazyderef (hd V15101) V15359) (if (= : V15102) (let V15103 (shun.lazyderef (tl V15101) V15359) (if (cons? V15103) (let V15104 (shun.lazyderef (hd V15103) V15359) (if (cons? V15104) (let V15105 (shun.lazyderef (hd V15104) V15359) (if (= list V15105) (let V15106 (shun.lazyderef (tl V15104) V15359) (if (cons? V15106) (let A (hd V15106) (let V15107 (shun.lazyderef (tl V15106) V15359) (if (= () V15107) (let V15108 (shun.lazyderef (tl V15103) V15359) (if (= () V15108) (let Hyp (tl V15094) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons (shun.lazyderef A V15359) ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons (cons list (cons (shun.lazyderef A V15359) ())) ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (if (shun.pvar? V15108) (do (shun.bindv V15108 () V15359) (let Result (let Hyp (tl V15094) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons (shun.lazyderef A V15359) ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons (cons list (cons (shun.lazyderef A V15359) ())) ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (do (shun.unbindv V15108 V15359) Result))) false))) (if (shun.pvar? V15107) (do (shun.bindv V15107 () V15359) (let Result (let V15109 (shun.lazyderef (tl V15103) V15359) (if (= () V15109) (let Hyp (tl V15094) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons (shun.lazyderef A V15359) ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons (cons list (cons (shun.lazyderef A V15359) ())) ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (if (shun.pvar? V15109) (do (shun.bindv V15109 () V15359) (let Result (let Hyp (tl V15094) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons (shun.lazyderef A V15359) ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons (cons list (cons (shun.lazyderef A V15359) ())) ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (do (shun.unbindv V15109 V15359) Result))) false))) (do (shun.unbindv V15107 V15359) Result))) false)))) (if (shun.pvar? V15106) (let A (shun.newpv V15359) (do (shun.bindv V15106 (cons A ()) V15359) (let Result (let V15110 (shun.lazyderef (tl V15103) V15359) (if (= () V15110) (let Hyp (tl V15094) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons (shun.lazyderef A V15359) ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons (cons list (cons (shun.lazyderef A V15359) ())) ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (if (shun.pvar? V15110) (do (shun.bindv V15110 () V15359) (let Result (let Hyp (tl V15094) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons (shun.lazyderef A V15359) ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons (cons list (cons (shun.lazyderef A V15359) ())) ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (do (shun.unbindv V15110 V15359) Result))) false))) (do (shun.unbindv V15106 V15359) Result)))) false))) (if (shun.pvar? V15105) (do (shun.bindv V15105 list V15359) (let Result (let V15111 (shun.lazyderef (tl V15104) V15359) (if (cons? V15111) (let A (hd V15111) (let V15112 (shun.lazyderef (tl V15111) V15359) (if (= () V15112) (let V15113 (shun.lazyderef (tl V15103) V15359) (if (= () V15113) (let Hyp (tl V15094) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons (shun.lazyderef A V15359) ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons (cons list (cons (shun.lazyderef A V15359) ())) ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (if (shun.pvar? V15113) (do (shun.bindv V15113 () V15359) (let Result (let Hyp (tl V15094) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons (shun.lazyderef A V15359) ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons (cons list (cons (shun.lazyderef A V15359) ())) ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (do (shun.unbindv V15113 V15359) Result))) false))) (if (shun.pvar? V15112) (do (shun.bindv V15112 () V15359) (let Result (let V15114 (shun.lazyderef (tl V15103) V15359) (if (= () V15114) (let Hyp (tl V15094) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons (shun.lazyderef A V15359) ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons (cons list (cons (shun.lazyderef A V15359) ())) ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (if (shun.pvar? V15114) (do (shun.bindv V15114 () V15359) (let Result (let Hyp (tl V15094) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons (shun.lazyderef A V15359) ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons (cons list (cons (shun.lazyderef A V15359) ())) ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (do (shun.unbindv V15114 V15359) Result))) false))) (do (shun.unbindv V15112 V15359) Result))) false)))) (if (shun.pvar? V15111) (let A (shun.newpv V15359) (do (shun.bindv V15111 (cons A ()) V15359) (let Result (let V15115 (shun.lazyderef (tl V15103) V15359) (if (= () V15115) (let Hyp (tl V15094) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons (shun.lazyderef A V15359) ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons (cons list (cons (shun.lazyderef A V15359) ())) ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (if (shun.pvar? V15115) (do (shun.bindv V15115 () V15359) (let Result (let Hyp (tl V15094) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons (shun.lazyderef A V15359) ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons (cons list (cons (shun.lazyderef A V15359) ())) ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (do (shun.unbindv V15115 V15359) Result))) false))) (do (shun.unbindv V15111 V15359) Result)))) false))) (do (shun.unbindv V15105 V15359) Result))) false))) (if (shun.pvar? V15104) (let A (shun.newpv V15359) (do (shun.bindv V15104 (cons list (cons A ())) V15359) (let Result (let V15116 (shun.lazyderef (tl V15103) V15359) (if (= () V15116) (let Hyp (tl V15094) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons (shun.lazyderef A V15359) ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons (cons list (cons (shun.lazyderef A V15359) ())) ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (if (shun.pvar? V15116) (do (shun.bindv V15116 () V15359) (let Result (let Hyp (tl V15094) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons (shun.lazyderef A V15359) ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons (cons list (cons (shun.lazyderef A V15359) ())) ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (do (shun.unbindv V15116 V15359) Result))) false))) (do (shun.unbindv V15104 V15359) Result)))) false))) false)) false)) false)) false))) false))) false)) false)) false)) false)) false)) (if (= Case false) (let Case (let V15117 (shun.lazyderef V15357 V15359) (if (cons? V15117) (let V15118 (shun.lazyderef (hd V15117) V15359) (if (cons? V15118) (let V15119 (shun.lazyderef (hd V15118) V15359) (if (cons? V15119) (let V15120 (shun.lazyderef (hd V15119) V15359) (if (= @p V15120) (let V15121 (shun.lazyderef (tl V15119) V15359) (if (cons? V15121) (let X (hd V15121) (let V15122 (shun.lazyderef (tl V15121) V15359) (if (cons? V15122) (let Y (hd V15122) (let V15123 (shun.lazyderef (tl V15122) V15359) (if (= () V15123) (let V15124 (shun.lazyderef (tl V15118) V15359) (if (cons? V15124) (let V15125 (shun.lazyderef (hd V15124) V15359) (if (= : V15125) (let V15126 (shun.lazyderef (tl V15124) V15359) (if (cons? V15126) (let V15127 (shun.lazyderef (hd V15126) V15359) (if (cons? V15127) (let A (hd V15127) (let V15128 (shun.lazyderef (tl V15127) V15359) (if (cons? V15128) (let V15129 (shun.lazyderef (hd V15128) V15359) (if (= * V15129) (let V15130 (shun.lazyderef (tl V15128) V15359) (if (cons? V15130) (let B (hd V15130) (let V15131 (shun.lazyderef (tl V15130) V15359) (if (= () V15131) (let V15132 (shun.lazyderef (tl V15126) V15359) (if (= () V15132) (let Hyp (tl V15117) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons (shun.lazyderef A V15359) ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons (shun.lazyderef B V15359) ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (if (shun.pvar? V15132) (do (shun.bindv V15132 () V15359) (let Result (let Hyp (tl V15117) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons (shun.lazyderef A V15359) ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons (shun.lazyderef B V15359) ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (do (shun.unbindv V15132 V15359) Result))) false))) (if (shun.pvar? V15131) (do (shun.bindv V15131 () V15359) (let Result (let V15133 (shun.lazyderef (tl V15126) V15359) (if (= () V15133) (let Hyp (tl V15117) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons (shun.lazyderef A V15359) ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons (shun.lazyderef B V15359) ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (if (shun.pvar? V15133) (do (shun.bindv V15133 () V15359) (let Result (let Hyp (tl V15117) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons (shun.lazyderef A V15359) ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons (shun.lazyderef B V15359) ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (do (shun.unbindv V15133 V15359) Result))) false))) (do (shun.unbindv V15131 V15359) Result))) false)))) (if (shun.pvar? V15130) (let B (shun.newpv V15359) (do (shun.bindv V15130 (cons B ()) V15359) (let Result (let V15134 (shun.lazyderef (tl V15126) V15359) (if (= () V15134) (let Hyp (tl V15117) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons (shun.lazyderef A V15359) ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons (shun.lazyderef B V15359) ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (if (shun.pvar? V15134) (do (shun.bindv V15134 () V15359) (let Result (let Hyp (tl V15117) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons (shun.lazyderef A V15359) ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons (shun.lazyderef B V15359) ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (do (shun.unbindv V15134 V15359) Result))) false))) (do (shun.unbindv V15130 V15359) Result)))) false))) (if (shun.pvar? V15129) (do (shun.bindv V15129 * V15359) (let Result (let V15135 (shun.lazyderef (tl V15128) V15359) (if (cons? V15135) (let B (hd V15135) (let V15136 (shun.lazyderef (tl V15135) V15359) (if (= () V15136) (let V15137 (shun.lazyderef (tl V15126) V15359) (if (= () V15137) (let Hyp (tl V15117) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons (shun.lazyderef A V15359) ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons (shun.lazyderef B V15359) ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (if (shun.pvar? V15137) (do (shun.bindv V15137 () V15359) (let Result (let Hyp (tl V15117) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons (shun.lazyderef A V15359) ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons (shun.lazyderef B V15359) ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (do (shun.unbindv V15137 V15359) Result))) false))) (if (shun.pvar? V15136) (do (shun.bindv V15136 () V15359) (let Result (let V15138 (shun.lazyderef (tl V15126) V15359) (if (= () V15138) (let Hyp (tl V15117) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons (shun.lazyderef A V15359) ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons (shun.lazyderef B V15359) ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (if (shun.pvar? V15138) (do (shun.bindv V15138 () V15359) (let Result (let Hyp (tl V15117) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons (shun.lazyderef A V15359) ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons (shun.lazyderef B V15359) ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (do (shun.unbindv V15138 V15359) Result))) false))) (do (shun.unbindv V15136 V15359) Result))) false)))) (if (shun.pvar? V15135) (let B (shun.newpv V15359) (do (shun.bindv V15135 (cons B ()) V15359) (let Result (let V15139 (shun.lazyderef (tl V15126) V15359) (if (= () V15139) (let Hyp (tl V15117) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons (shun.lazyderef A V15359) ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons (shun.lazyderef B V15359) ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (if (shun.pvar? V15139) (do (shun.bindv V15139 () V15359) (let Result (let Hyp (tl V15117) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons (shun.lazyderef A V15359) ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons (shun.lazyderef B V15359) ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (do (shun.unbindv V15139 V15359) Result))) false))) (do (shun.unbindv V15135 V15359) Result)))) false))) (do (shun.unbindv V15129 V15359) Result))) false))) (if (shun.pvar? V15128) (let B (shun.newpv V15359) (do (shun.bindv V15128 (cons * (cons B ())) V15359) (let Result (let V15140 (shun.lazyderef (tl V15126) V15359) (if (= () V15140) (let Hyp (tl V15117) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons (shun.lazyderef A V15359) ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons (shun.lazyderef B V15359) ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (if (shun.pvar? V15140) (do (shun.bindv V15140 () V15359) (let Result (let Hyp (tl V15117) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons (shun.lazyderef A V15359) ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons (shun.lazyderef B V15359) ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (do (shun.unbindv V15140 V15359) Result))) false))) (do (shun.unbindv V15128 V15359) Result)))) false)))) (if (shun.pvar? V15127) (let A (shun.newpv V15359) (let B (shun.newpv V15359) (do (shun.bindv V15127 (cons A (cons * (cons B ()))) V15359) (let Result (let V15141 (shun.lazyderef (tl V15126) V15359) (if (= () V15141) (let Hyp (tl V15117) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons (shun.lazyderef A V15359) ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons (shun.lazyderef B V15359) ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (if (shun.pvar? V15141) (do (shun.bindv V15141 () V15359) (let Result (let Hyp (tl V15117) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons (shun.lazyderef A V15359) ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons (shun.lazyderef B V15359) ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (do (shun.unbindv V15141 V15359) Result))) false))) (do (shun.unbindv V15127 V15359) Result))))) false))) false)) false)) false)) false))) false))) false)) false)) false)) false)) false)) (if (= Case false) (let Case (let V15142 (shun.lazyderef V15357 V15359) (if (cons? V15142) (let V15143 (shun.lazyderef (hd V15142) V15359) (if (cons? V15143) (let V15144 (shun.lazyderef (hd V15143) V15359) (if (cons? V15144) (let V15145 (shun.lazyderef (hd V15144) V15359) (if (= @v V15145) (let V15146 (shun.lazyderef (tl V15144) V15359) (if (cons? V15146) (let X (hd V15146) (let V15147 (shun.lazyderef (tl V15146) V15359) (if (cons? V15147) (let Y (hd V15147) (let V15148 (shun.lazyderef (tl V15147) V15359) (if (= () V15148) (let V15149 (shun.lazyderef (tl V15143) V15359) (if (cons? V15149) (let V15150 (shun.lazyderef (hd V15149) V15359) (if (= : V15150) (let V15151 (shun.lazyderef (tl V15149) V15359) (if (cons? V15151) (let V15152 (shun.lazyderef (hd V15151) V15359) (if (cons? V15152) (let V15153 (shun.lazyderef (hd V15152) V15359) (if (= vector V15153) (let V15154 (shun.lazyderef (tl V15152) V15359) (if (cons? V15154) (let A (hd V15154) (let V15155 (shun.lazyderef (tl V15154) V15359) (if (= () V15155) (let V15156 (shun.lazyderef (tl V15151) V15359) (if (= () V15156) (let Hyp (tl V15142) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons (shun.lazyderef A V15359) ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons (cons vector (cons (shun.lazyderef A V15359) ())) ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (if (shun.pvar? V15156) (do (shun.bindv V15156 () V15359) (let Result (let Hyp (tl V15142) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons (shun.lazyderef A V15359) ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons (cons vector (cons (shun.lazyderef A V15359) ())) ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (do (shun.unbindv V15156 V15359) Result))) false))) (if (shun.pvar? V15155) (do (shun.bindv V15155 () V15359) (let Result (let V15157 (shun.lazyderef (tl V15151) V15359) (if (= () V15157) (let Hyp (tl V15142) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons (shun.lazyderef A V15359) ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons (cons vector (cons (shun.lazyderef A V15359) ())) ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (if (shun.pvar? V15157) (do (shun.bindv V15157 () V15359) (let Result (let Hyp (tl V15142) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons (shun.lazyderef A V15359) ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons (cons vector (cons (shun.lazyderef A V15359) ())) ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (do (shun.unbindv V15157 V15359) Result))) false))) (do (shun.unbindv V15155 V15359) Result))) false)))) (if (shun.pvar? V15154) (let A (shun.newpv V15359) (do (shun.bindv V15154 (cons A ()) V15359) (let Result (let V15158 (shun.lazyderef (tl V15151) V15359) (if (= () V15158) (let Hyp (tl V15142) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons (shun.lazyderef A V15359) ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons (cons vector (cons (shun.lazyderef A V15359) ())) ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (if (shun.pvar? V15158) (do (shun.bindv V15158 () V15359) (let Result (let Hyp (tl V15142) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons (shun.lazyderef A V15359) ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons (cons vector (cons (shun.lazyderef A V15359) ())) ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (do (shun.unbindv V15158 V15359) Result))) false))) (do (shun.unbindv V15154 V15359) Result)))) false))) (if (shun.pvar? V15153) (do (shun.bindv V15153 vector V15359) (let Result (let V15159 (shun.lazyderef (tl V15152) V15359) (if (cons? V15159) (let A (hd V15159) (let V15160 (shun.lazyderef (tl V15159) V15359) (if (= () V15160) (let V15161 (shun.lazyderef (tl V15151) V15359) (if (= () V15161) (let Hyp (tl V15142) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons (shun.lazyderef A V15359) ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons (cons vector (cons (shun.lazyderef A V15359) ())) ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (if (shun.pvar? V15161) (do (shun.bindv V15161 () V15359) (let Result (let Hyp (tl V15142) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons (shun.lazyderef A V15359) ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons (cons vector (cons (shun.lazyderef A V15359) ())) ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (do (shun.unbindv V15161 V15359) Result))) false))) (if (shun.pvar? V15160) (do (shun.bindv V15160 () V15359) (let Result (let V15162 (shun.lazyderef (tl V15151) V15359) (if (= () V15162) (let Hyp (tl V15142) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons (shun.lazyderef A V15359) ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons (cons vector (cons (shun.lazyderef A V15359) ())) ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (if (shun.pvar? V15162) (do (shun.bindv V15162 () V15359) (let Result (let Hyp (tl V15142) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons (shun.lazyderef A V15359) ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons (cons vector (cons (shun.lazyderef A V15359) ())) ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (do (shun.unbindv V15162 V15359) Result))) false))) (do (shun.unbindv V15160 V15359) Result))) false)))) (if (shun.pvar? V15159) (let A (shun.newpv V15359) (do (shun.bindv V15159 (cons A ()) V15359) (let Result (let V15163 (shun.lazyderef (tl V15151) V15359) (if (= () V15163) (let Hyp (tl V15142) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons (shun.lazyderef A V15359) ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons (cons vector (cons (shun.lazyderef A V15359) ())) ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (if (shun.pvar? V15163) (do (shun.bindv V15163 () V15359) (let Result (let Hyp (tl V15142) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons (shun.lazyderef A V15359) ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons (cons vector (cons (shun.lazyderef A V15359) ())) ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (do (shun.unbindv V15163 V15359) Result))) false))) (do (shun.unbindv V15159 V15359) Result)))) false))) (do (shun.unbindv V15153 V15359) Result))) false))) (if (shun.pvar? V15152) (let A (shun.newpv V15359) (do (shun.bindv V15152 (cons vector (cons A ())) V15359) (let Result (let V15164 (shun.lazyderef (tl V15151) V15359) (if (= () V15164) (let Hyp (tl V15142) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons (shun.lazyderef A V15359) ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons (cons vector (cons (shun.lazyderef A V15359) ())) ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (if (shun.pvar? V15164) (do (shun.bindv V15164 () V15359) (let Result (let Hyp (tl V15142) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons (shun.lazyderef A V15359) ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons (cons vector (cons (shun.lazyderef A V15359) ())) ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (do (shun.unbindv V15164 V15359) Result))) false))) (do (shun.unbindv V15152 V15359) Result)))) false))) false)) false)) false)) false))) false))) false)) false)) false)) false)) false)) (if (= Case false) (let Case (let V15165 (shun.lazyderef V15357 V15359) (if (cons? V15165) (let V15166 (shun.lazyderef (hd V15165) V15359) (if (cons? V15166) (let V15167 (shun.lazyderef (hd V15166) V15359) (if (cons? V15167) (let V15168 (shun.lazyderef (hd V15167) V15359) (if (= @s V15168) (let V15169 (shun.lazyderef (tl V15167) V15359) (if (cons? V15169) (let X (hd V15169) (let V15170 (shun.lazyderef (tl V15169) V15359) (if (cons? V15170) (let Y (hd V15170) (let V15171 (shun.lazyderef (tl V15170) V15359) (if (= () V15171) (let V15172 (shun.lazyderef (tl V15166) V15359) (if (cons? V15172) (let V15173 (shun.lazyderef (hd V15172) V15359) (if (= : V15173) (let V15174 (shun.lazyderef (tl V15172) V15359) (if (cons? V15174) (let V15175 (shun.lazyderef (hd V15174) V15359) (if (= string V15175) (let V15176 (shun.lazyderef (tl V15174) V15359) (if (= () V15176) (let Hyp (tl V15165) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons string ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons string ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (if (shun.pvar? V15176) (do (shun.bindv V15176 () V15359) (let Result (let Hyp (tl V15165) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons string ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons string ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (do (shun.unbindv V15176 V15359) Result))) false))) (if (shun.pvar? V15175) (do (shun.bindv V15175 string V15359) (let Result (let V15177 (shun.lazyderef (tl V15174) V15359) (if (= () V15177) (let Hyp (tl V15165) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons string ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons string ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (if (shun.pvar? V15177) (do (shun.bindv V15177 () V15359) (let Result (let Hyp (tl V15165) (do (shun.incinfs) (bind V15358 (cons (cons (shun.lazyderef X V15359) (cons : (cons string ()))) (cons (cons (shun.lazyderef Y V15359) (cons : (cons string ()))) (shun.lazyderef Hyp V15359))) V15359 V15360))) (do (shun.unbindv V15177 V15359) Result))) false))) (do (shun.unbindv V15175 V15359) Result))) false))) false)) false)) false)) false))) false))) false)) false)) false)) false)) false)) (if (= Case false) (let V15178 (shun.lazyderef V15357 V15359) (if (cons? V15178) (let X (hd V15178) (let Hyp (tl V15178) (let NewHyps (shun.newpv V15359) (do (shun.incinfs) (bind V15358 (cons (shun.lazyderef X V15359) (shun.lazyderef NewHyps V15359)) V15359 (freeze (shun.t*-hyps Hyp NewHyps V15359 V15360))))))) false)) Case)) Case)) Case)) Case)))

(defun shun.show (V15377 V15378 V15379 V15380) (cond ((value shun.*spy*) (do (shun.line) (do (shun.show-p (shun.deref V15377 V15379)) (do (nl 1) (do (nl 1) (do (shun.show-assumptions (shun.deref V15378 V15379) 1) (do (shun.prhush "
> " (stoutput)) (do (shun.pause-for-user) (thaw V15380))))))))) (true (thaw V15380))))

(defun shun.line () (let Infs (inferences) (shun.prhush (cn "____________________________________________________________ " (shun.app Infs (cn " inference" (shun.app (if (= 1 Infs) "" "s") " 
?- " shun.a)) shun.a)) (stoutput))))

(defun shun.show-p (V15382) (cond ((and (cons? V15382) (and (cons? (tl V15382)) (and (= : (hd (tl V15382))) (and (cons? (tl (tl V15382))) (= () (tl (tl (tl V15382)))))))) (shun.prhush (shun.app (hd V15382) (cn " : " (shun.app (hd (tl (tl V15382))) "" shun.r)) shun.r) (stoutput))) (true (shun.prhush (shun.app V15382 "" shun.r) (stoutput)))))

(defun shun.show-assumptions (V15387 V15388) (cond ((= () V15387) shun.skip) ((cons? V15387) (do (shun.prhush (shun.app V15388 ". " shun.a) (stoutput)) (do (shun.show-p (hd V15387)) (do (nl 1) (shun.show-assumptions (tl V15387) (+ V15388 1)))))) (true (shun.f_error shun.show-assumptions))))

(defun shun.pause-for-user () (let Byte (read-byte (stinput)) (if (= Byte 94) (simple-error "input aborted
") (nl 1))))

(defun shun.typedf? (V15390) (cons? (assoc V15390 (value shun.*signedfuncs*))))

(defun shun.sigf (V15392) (concat shun.type-signature-of- V15392))

(defun shun.placeholder () (gensym &&))

(defun shun.base (V15397 V15398 V15399 V15400) (let Case (let V15081 (shun.lazyderef V15398 V15399) (if (= number V15081) (do (shun.incinfs) (fwhen (number? (shun.lazyderef V15397 V15399)) V15399 V15400)) (if (shun.pvar? V15081) (do (shun.bindv V15081 number V15399) (let Result (do (shun.incinfs) (fwhen (number? (shun.lazyderef V15397 V15399)) V15399 V15400)) (do (shun.unbindv V15081 V15399) Result))) false))) (if (= Case false) (let Case (let V15082 (shun.lazyderef V15398 V15399) (if (= boolean V15082) (do (shun.incinfs) (fwhen (boolean? (shun.lazyderef V15397 V15399)) V15399 V15400)) (if (shun.pvar? V15082) (do (shun.bindv V15082 boolean V15399) (let Result (do (shun.incinfs) (fwhen (boolean? (shun.lazyderef V15397 V15399)) V15399 V15400)) (do (shun.unbindv V15082 V15399) Result))) false))) (if (= Case false) (let Case (let V15083 (shun.lazyderef V15398 V15399) (if (= string V15083) (do (shun.incinfs) (fwhen (string? (shun.lazyderef V15397 V15399)) V15399 V15400)) (if (shun.pvar? V15083) (do (shun.bindv V15083 string V15399) (let Result (do (shun.incinfs) (fwhen (string? (shun.lazyderef V15397 V15399)) V15399 V15400)) (do (shun.unbindv V15083 V15399) Result))) false))) (if (= Case false) (let Case (let V15084 (shun.lazyderef V15398 V15399) (if (= symbol V15084) (do (shun.incinfs) (fwhen (symbol? (shun.lazyderef V15397 V15399)) V15399 (freeze (fwhen (not (shun.ue? (shun.lazyderef V15397 V15399))) V15399 V15400)))) (if (shun.pvar? V15084) (do (shun.bindv V15084 symbol V15399) (let Result (do (shun.incinfs) (fwhen (symbol? (shun.lazyderef V15397 V15399)) V15399 (freeze (fwhen (not (shun.ue? (shun.lazyderef V15397 V15399))) V15399 V15400)))) (do (shun.unbindv V15084 V15399) Result))) false))) (if (= Case false) (let V15085 (shun.lazyderef V15397 V15399) (if (= () V15085) (let V15086 (shun.lazyderef V15398 V15399) (if (cons? V15086) (let V15087 (shun.lazyderef (hd V15086) V15399) (if (= list V15087) (let V15088 (shun.lazyderef (tl V15086) V15399) (if (cons? V15088) (let A (hd V15088) (let V15089 (shun.lazyderef (tl V15088) V15399) (if (= () V15089) (do (shun.incinfs) (thaw V15400)) (if (shun.pvar? V15089) (do (shun.bindv V15089 () V15399) (let Result (do (shun.incinfs) (thaw V15400)) (do (shun.unbindv V15089 V15399) Result))) false)))) (if (shun.pvar? V15088) (let A (shun.newpv V15399) (do (shun.bindv V15088 (cons A ()) V15399) (let Result (do (shun.incinfs) (thaw V15400)) (do (shun.unbindv V15088 V15399) Result)))) false))) (if (shun.pvar? V15087) (do (shun.bindv V15087 list V15399) (let Result (let V15090 (shun.lazyderef (tl V15086) V15399) (if (cons? V15090) (let A (hd V15090) (let V15091 (shun.lazyderef (tl V15090) V15399) (if (= () V15091) (do (shun.incinfs) (thaw V15400)) (if (shun.pvar? V15091) (do (shun.bindv V15091 () V15399) (let Result (do (shun.incinfs) (thaw V15400)) (do (shun.unbindv V15091 V15399) Result))) false)))) (if (shun.pvar? V15090) (let A (shun.newpv V15399) (do (shun.bindv V15090 (cons A ()) V15399) (let Result (do (shun.incinfs) (thaw V15400)) (do (shun.unbindv V15090 V15399) Result)))) false))) (do (shun.unbindv V15087 V15399) Result))) false))) (if (shun.pvar? V15086) (let A (shun.newpv V15399) (do (shun.bindv V15086 (cons list (cons A ())) V15399) (let Result (do (shun.incinfs) (thaw V15400)) (do (shun.unbindv V15086 V15399) Result)))) false))) false)) Case)) Case)) Case)) Case)))

(defun shun.by_hypothesis (V15406 V15407 V15408 V15409 V15410) (let Case (let V15072 (shun.lazyderef V15408 V15409) (if (cons? V15072) (let V15073 (shun.lazyderef (hd V15072) V15409) (if (cons? V15073) (let Y (hd V15073) (let V15074 (shun.lazyderef (tl V15073) V15409) (if (cons? V15074) (let V15075 (shun.lazyderef (hd V15074) V15409) (if (= : V15075) (let V15076 (shun.lazyderef (tl V15074) V15409) (if (cons? V15076) (let B (hd V15076) (let V15077 (shun.lazyderef (tl V15076) V15409) (if (= () V15077) (do (shun.incinfs) (identical V15406 Y V15409 (freeze (unify! V15407 B V15409 V15410)))) false))) false)) false)) false))) false)) false)) (if (= Case false) (let V15078 (shun.lazyderef V15408 V15409) (if (cons? V15078) (let Hyp (tl V15078) (do (shun.incinfs) (shun.by_hypothesis V15406 V15407 Hyp V15409 V15410))) false)) Case)))

(defun shun.t*-def (V15416 V15417 V15418 V15419 V15420) (let V15066 (shun.lazyderef V15416 V15419) (if (cons? V15066) (let V15067 (shun.lazyderef (hd V15066) V15419) (if (= define V15067) (let V15068 (shun.lazyderef (tl V15066) V15419) (if (cons? V15068) (let F (hd V15068) (let X (tl V15068) (let Y (shun.newpv V15419) (let E (shun.newpv V15419) (do (shun.incinfs) (shun.t*-defh (compile (lambda Y (shun.<sig+rules> Y)) X (lambda E (if (cons? E) (simple-error (cn "parse error here: " (shun.app E "
" shun.s))) (simple-error "parse error
")))) F V15417 V15418 V15419 V15420)))))) false)) false)) false)))

(defun shun.t*-defh (V15427 V15428 V15429 V15430 V15431 V15432) (let V15062 (shun.lazyderef V15427 V15431) (if (cons? V15062) (let Sig (hd V15062) (let Rules (tl V15062) (do (shun.incinfs) (shun.t*-defhh Sig (shun.ue-sig Sig) V15428 V15429 V15430 Rules V15431 V15432)))) false)))

(defun shun.t*-defhh (V15441 V15442 V15443 V15444 V15445 V15446 V15447 V15448) (do (shun.incinfs) (shun.t*-rules V15446 V15442 1 V15443 (cons (cons V15443 (cons : (cons V15442 ()))) V15445) V15447 (freeze (shun.memo V15443 V15441 V15444 V15447 V15448)))))

(defun shun.memo (V15454 V15455 V15456 V15457 V15458) (let Jnk (shun.newpv V15457) (do (shun.incinfs) (unify! V15456 V15455 V15457 (freeze (bind Jnk (declare (shun.lazyderef V15454 V15457) (shun.lazyderef V15456 V15457)) V15457 V15458))))))

(defun shun.<sig+rules> (V15460) (let Parse_shun.<signature> (shun.<signature> V15460) (if (not (= (fail) Parse_shun.<signature>)) (let Parse_shun.<non-ll-rules> (shun.<non-ll-rules> Parse_shun.<signature>) (if (not (= (fail) Parse_shun.<non-ll-rules>)) (shun.pair (hd Parse_shun.<non-ll-rules>) (cons (shun.hdtl Parse_shun.<signature>) (shun.hdtl Parse_shun.<non-ll-rules>))) (fail))) (fail))))

(defun shun.<non-ll-rules> (V15462) (let YaccParse (let Parse_shun.<rule> (shun.<rule> V15462) (if (not (= (fail) Parse_shun.<rule>)) (let Parse_shun.<non-ll-rules> (shun.<non-ll-rules> Parse_shun.<rule>) (if (not (= (fail) Parse_shun.<non-ll-rules>)) (shun.pair (hd Parse_shun.<non-ll-rules>) (cons (shun.hdtl Parse_shun.<rule>) (shun.hdtl Parse_shun.<non-ll-rules>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shun.<rule> (shun.<rule> V15462) (if (not (= (fail) Parse_shun.<rule>)) (shun.pair (hd Parse_shun.<rule>) (cons (shun.hdtl Parse_shun.<rule>) ())) (fail))) YaccParse)))

(defun shun.ue (V15464) (cond ((and (cons? V15464) (and (cons? (tl V15464)) (and (= () (tl (tl V15464))) (= (hd V15464) protect)))) V15464) ((cons? V15464) (map (lambda Z (shun.ue Z)) V15464)) ((variable? V15464) (concat && V15464)) (true V15464)))

(defun shun.ue-sig (V15466) (cond ((cons? V15466) (map (lambda Z (shun.ue-sig Z)) V15466)) ((variable? V15466) (concat &&& V15466)) (true V15466)))

(defun shun.ues (V15472) (cond ((shun.ue? V15472) (cons V15472 ())) ((cons? V15472) (union (shun.ues (hd V15472)) (shun.ues (tl V15472)))) (true ())))

(defun shun.ue? (V15474) (and (symbol? V15474) (shun.ue-h? (str V15474))))

(defun shun.ue-h? (V15482) (cond ((and (shun.+string? V15482) (and (= "&" (pos V15482 0)) (and (shun.+string? (tlstr V15482)) (= "&" (pos (tlstr V15482) 0))))) true) (true false)))

(defun shun.t*-rules (V15490 V15491 V15492 V15493 V15494 V15495 V15496) (let Throwcontrol (shun.catchpoint) (shun.cutpoint Throwcontrol (let Case (let V15046 (shun.lazyderef V15490 V15495) (if (= () V15046) (do (shun.incinfs) (thaw V15496)) false)) (if (= Case false) (let Case (let V15047 (shun.lazyderef V15490 V15495) (if (cons? V15047) (let Rule (hd V15047) (let Rules (tl V15047) (do (shun.incinfs) (shun.t*-rule (shun.ue Rule) V15491 V15494 V15495 (freeze (cut Throwcontrol V15495 (freeze (shun.t*-rules Rules V15491 (+ V15492 1) V15493 V15494 V15495 V15496)))))))) false)) (if (= Case false) (let Err (shun.newpv V15495) (do (shun.incinfs) (bind Err (simple-error (cn "type error in rule " (shun.app (shun.lazyderef V15492 V15495) (cn " of " (shun.app (shun.lazyderef V15493 V15495) "" shun.a)) shun.a))) V15495 V15496))) Case)) Case)))))

(defun shun.t*-rule (V15502 V15503 V15504 V15505 V15506) (let Throwcontrol (shun.catchpoint) (shun.cutpoint Throwcontrol (let V15038 (shun.lazyderef V15502 V15505) (if (cons? V15038) (let Patterns (hd V15038) (let V15039 (shun.lazyderef (tl V15038) V15505) (if (cons? V15039) (let Action (hd V15039) (let V15040 (shun.lazyderef (tl V15039) V15505) (if (= () V15040) (let NewHyps (shun.newpv V15505) (do (shun.incinfs) (shun.newhyps (shun.placeholders Patterns) V15504 NewHyps V15505 (freeze (shun.t*-patterns Patterns V15503 NewHyps V15505 (freeze (cut Throwcontrol V15505 (freeze (shun.t*-action (shun.curry (shun.ue Action)) (shun.result-type Patterns V15503) (shun.patthyps Patterns V15503 V15504) V15505 V15506))))))))) false))) false))) false)))))

(defun shun.placeholders (V15512) (cond ((shun.ue? V15512) (cons V15512 ())) ((cons? V15512) (union (shun.placeholders (hd V15512)) (shun.placeholders (tl V15512)))) (true ())))

(defun shun.newhyps (V15518 V15519 V15520 V15521 V15522) (let Case (let V15025 (shun.lazyderef V15518 V15521) (if (= () V15025) (do (shun.incinfs) (unify! V15520 V15519 V15521 V15522)) false)) (if (= Case false) (let V15026 (shun.lazyderef V15518 V15521) (if (cons? V15026) (let V15021 (hd V15026) (let Vs (tl V15026) (let V15027 (shun.lazyderef V15520 V15521) (if (cons? V15027) (let V15028 (shun.lazyderef (hd V15027) V15521) (if (cons? V15028) (let V (hd V15028) (let V15029 (shun.lazyderef (tl V15028) V15521) (if (cons? V15029) (let V15030 (shun.lazyderef (hd V15029) V15521) (if (= : V15030) (let V15031 (shun.lazyderef (tl V15029) V15521) (if (cons? V15031) (let A (hd V15031) (let V15032 (shun.lazyderef (tl V15031) V15521) (if (= () V15032) (let NewHyp (tl V15027) (do (shun.incinfs) (unify! V V15021 V15521 (freeze (shun.newhyps Vs V15519 NewHyp V15521 V15522))))) (if (shun.pvar? V15032) (do (shun.bindv V15032 () V15521) (let Result (let NewHyp (tl V15027) (do (shun.incinfs) (unify! V V15021 V15521 (freeze (shun.newhyps Vs V15519 NewHyp V15521 V15522))))) (do (shun.unbindv V15032 V15521) Result))) false)))) (if (shun.pvar? V15031) (let A (shun.newpv V15521) (do (shun.bindv V15031 (cons A ()) V15521) (let Result (let NewHyp (tl V15027) (do (shun.incinfs) (unify! V V15021 V15521 (freeze (shun.newhyps Vs V15519 NewHyp V15521 V15522))))) (do (shun.unbindv V15031 V15521) Result)))) false))) (if (shun.pvar? V15030) (do (shun.bindv V15030 : V15521) (let Result (let V15033 (shun.lazyderef (tl V15029) V15521) (if (cons? V15033) (let A (hd V15033) (let V15034 (shun.lazyderef (tl V15033) V15521) (if (= () V15034) (let NewHyp (tl V15027) (do (shun.incinfs) (unify! V V15021 V15521 (freeze (shun.newhyps Vs V15519 NewHyp V15521 V15522))))) (if (shun.pvar? V15034) (do (shun.bindv V15034 () V15521) (let Result (let NewHyp (tl V15027) (do (shun.incinfs) (unify! V V15021 V15521 (freeze (shun.newhyps Vs V15519 NewHyp V15521 V15522))))) (do (shun.unbindv V15034 V15521) Result))) false)))) (if (shun.pvar? V15033) (let A (shun.newpv V15521) (do (shun.bindv V15033 (cons A ()) V15521) (let Result (let NewHyp (tl V15027) (do (shun.incinfs) (unify! V V15021 V15521 (freeze (shun.newhyps Vs V15519 NewHyp V15521 V15522))))) (do (shun.unbindv V15033 V15521) Result)))) false))) (do (shun.unbindv V15030 V15521) Result))) false))) (if (shun.pvar? V15029) (let A (shun.newpv V15521) (do (shun.bindv V15029 (cons : (cons A ())) V15521) (let Result (let NewHyp (tl V15027) (do (shun.incinfs) (unify! V V15021 V15521 (freeze (shun.newhyps Vs V15519 NewHyp V15521 V15522))))) (do (shun.unbindv V15029 V15521) Result)))) false)))) (if (shun.pvar? V15028) (let V (shun.newpv V15521) (let A (shun.newpv V15521) (do (shun.bindv V15028 (cons V (cons : (cons A ()))) V15521) (let Result (let NewHyp (tl V15027) (do (shun.incinfs) (unify! V V15021 V15521 (freeze (shun.newhyps Vs V15519 NewHyp V15521 V15522))))) (do (shun.unbindv V15028 V15521) Result))))) false))) (if (shun.pvar? V15027) (let V (shun.newpv V15521) (let A (shun.newpv V15521) (let NewHyp (shun.newpv V15521) (do (shun.bindv V15027 (cons (cons V (cons : (cons A ()))) NewHyp) V15521) (let Result (do (shun.incinfs) (unify! V V15021 V15521 (freeze (shun.newhyps Vs V15519 NewHyp V15521 V15522)))) (do (shun.unbindv V15027 V15521) Result)))))) false))))) false)) Case)))

(defun shun.patthyps (V15528 V15529 V15530) (cond ((= () V15528) V15530) ((and (cons? V15528) (and (cons? V15529) (and (cons? (tl V15529)) (and (= --> (hd (tl V15529))) (and (cons? (tl (tl V15529))) (= () (tl (tl (tl V15529))))))))) (adjoin (cons (hd V15528) (cons : (cons (hd V15529) ()))) (shun.patthyps (tl V15528) (hd (tl (tl V15529))) V15530))) (true (shun.f_error shun.patthyps))))

(defun shun.result-type (V15537 V15538) (cond ((and (= () V15537) (and (cons? V15538) (and (= --> (hd V15538)) (and (cons? (tl V15538)) (= () (tl (tl V15538))))))) (hd (tl V15538))) ((= () V15537) V15538) ((and (cons? V15537) (and (cons? V15538) (and (cons? (tl V15538)) (and (= --> (hd (tl V15538))) (and (cons? (tl (tl V15538))) (= () (tl (tl (tl V15538))))))))) (shun.result-type (tl V15537) (hd (tl (tl V15538))))) (true (shun.f_error shun.result-type))))

(defun shun.t*-patterns (V15544 V15545 V15546 V15547 V15548) (let Case (let V15013 (shun.lazyderef V15544 V15547) (if (= () V15013) (do (shun.incinfs) (thaw V15548)) false)) (if (= Case false) (let V15014 (shun.lazyderef V15544 V15547) (if (cons? V15014) (let Pattern (hd V15014) (let Patterns (tl V15014) (let V15015 (shun.lazyderef V15545 V15547) (if (cons? V15015) (let A (hd V15015) (let V15016 (shun.lazyderef (tl V15015) V15547) (if (cons? V15016) (let V15017 (shun.lazyderef (hd V15016) V15547) (if (= --> V15017) (let V15018 (shun.lazyderef (tl V15016) V15547) (if (cons? V15018) (let B (hd V15018) (let V15019 (shun.lazyderef (tl V15018) V15547) (if (= () V15019) (do (shun.incinfs) (shun.t* (cons Pattern (cons : (cons A ()))) V15546 V15547 (freeze (shun.t*-patterns Patterns B V15546 V15547 V15548)))) false))) false)) false)) false))) false)))) false)) Case)))

(defun shun.t*-action (V15554 V15555 V15556 V15557 V15558) (let Throwcontrol (shun.catchpoint) (shun.cutpoint Throwcontrol (let Case (let V14990 (shun.lazyderef V15554 V15557) (if (cons? V14990) (let V14991 (shun.lazyderef (hd V14990) V15557) (if (= where V14991) (let V14992 (shun.lazyderef (tl V14990) V15557) (if (cons? V14992) (let P (hd V14992) (let V14993 (shun.lazyderef (tl V14992) V15557) (if (cons? V14993) (let Action (hd V14993) (let V14994 (shun.lazyderef (tl V14993) V15557) (if (= () V14994) (do (shun.incinfs) (cut Throwcontrol V15557 (freeze (shun.t* (cons P (cons : (cons boolean ()))) V15556 V15557 (freeze (cut Throwcontrol V15557 (freeze (shun.t*-action Action V15555 (cons (cons P (cons : (cons verified ()))) V15556) V15557 V15558)))))))) false))) false))) false)) false)) false)) (if (= Case false) (let Case (let V14995 (shun.lazyderef V15554 V15557) (if (cons? V14995) (let V14996 (shun.lazyderef (hd V14995) V15557) (if (= shun.choicepoint! V14996) (let V14997 (shun.lazyderef (tl V14995) V15557) (if (cons? V14997) (let V14998 (shun.lazyderef (hd V14997) V15557) (if (cons? V14998) (let V14999 (shun.lazyderef (hd V14998) V15557) (if (cons? V14999) (let V15000 (shun.lazyderef (hd V14999) V15557) (if (= fail-if V15000) (let V15001 (shun.lazyderef (tl V14999) V15557) (if (cons? V15001) (let F (hd V15001) (let V15002 (shun.lazyderef (tl V15001) V15557) (if (= () V15002) (let V15003 (shun.lazyderef (tl V14998) V15557) (if (cons? V15003) (let Action (hd V15003) (let V15004 (shun.lazyderef (tl V15003) V15557) (if (= () V15004) (let V15005 (shun.lazyderef (tl V14997) V15557) (if (= () V15005) (do (shun.incinfs) (cut Throwcontrol V15557 (freeze (shun.t*-action (cons where (cons (cons not (cons (cons F (cons Action ())) ())) (cons Action ()))) V15555 V15556 V15557 V15558)))) false)) false))) false)) false))) false)) false)) false)) false)) false)) false)) false)) (if (= Case false) (let Case (let V15006 (shun.lazyderef V15554 V15557) (if (cons? V15006) (let V15007 (shun.lazyderef (hd V15006) V15557) (if (= shun.choicepoint! V15007) (let V15008 (shun.lazyderef (tl V15006) V15557) (if (cons? V15008) (let Action (hd V15008) (let V15009 (shun.lazyderef (tl V15008) V15557) (if (= () V15009) (do (shun.incinfs) (cut Throwcontrol V15557 (freeze (shun.t*-action (cons where (cons (cons not (cons (cons (cons = (cons Action ())) (cons (cons fail ()) ())) ())) (cons Action ()))) V15555 V15556 V15557 V15558)))) false))) false)) false)) false)) (if (= Case false) (do (shun.incinfs) (shun.t* (cons V15554 (cons : (cons V15555 ()))) V15556 V15557 V15558)) Case)) Case)) Case)))))

(defun findall (V15564 V15565 V15566 V15567 V15568) (let B (shun.newpv V15567) (let A (shun.newpv V15567) (do (shun.incinfs) (bind A (gensym shun.a) V15567 (freeze (bind B (set (shun.lazyderef A V15567) ()) V15567 (freeze (shun.findallhelp V15564 V15565 V15566 A V15567 V15568)))))))))

(defun shun.findallhelp (V15575 V15576 V15577 V15578 V15579 V15580) (let Case (do (shun.incinfs) (call V15576 V15579 (freeze (shun.remember V15578 V15575 V15579 (freeze (fwhen false V15579 V15580)))))) (if (= Case false) (do (shun.incinfs) (bind V15577 (value (shun.lazyderef V15578 V15579)) V15579 V15580)) Case)))

(defun shun.remember (V15585 V15586 V15587 V15588) (let B (shun.newpv V15587) (do (shun.incinfs) (bind B (set (shun.deref V15585 V15587) (cons (shun.deref V15586 V15587) (value (shun.deref V15585 V15587)))) V15587 V15588))))



